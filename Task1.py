"""
Теоретическая оценка сложности алгоритма и затрат по памяти:

    Временная сложность:
        Метод append: O(n), где n — количество узлов в списке. Мы проходим по всем узлам, чтобы добавить новый.
        Метод reverse: O(n), где n — количество узлов в списке. Мы проходим по всем узлам, меняя направление ссылок.
        Метод print_list: O(n), где n — количество узлов в списке. Мы проходим по всем узлам, чтобы вывести их значения.

    Затраты по памяти:
        Хранение узлов: O(n), где n — количество узлов в списке. Каждый узел хранит значение и ссылку на следующий узел.
        Дополнительные переменные в методах (например, указатели): O(1). Они не зависят от размера списка.
        Общая память: O(n) для хранения узлов.
"""



class Node:
    def __init__(self, value):
        """Инициализация узла списка с заданным значением."""
        self.value = value  # Значение узла
        self.next = None  # Ссылка на следующий узел


class LinkedList:
    def __init__(self):
        """Инициализация пустого односвязного списка."""
        self.head = None  # Указатель на первый узел списка

    def append(self, value):
        """Добавляет новый узел с заданным значением в конец списка."""
        new_node = Node(value)
        if not self.head:  # Если список пуст, новый узел становится головой
            self.head = new_node
            return
        last = self.head
        while last.next:  # Находим последний узел
            last = last.next
        last.next = new_node  # Присоединяем новый узел к концу списка

    def reverse(self):
        """Реверсирует односвязный список."""
        prev = None  # Предыдущий узел
        current = self.head  # Текущий узел
        while current:  # Проходим по всем узлам списка
            next_node = current.next  # Сохраняем следующий узел
            current.next = prev  # Меняем направление ссылки
            prev = current  # Сдвигаем предыдущий узел вперед
            current = next_node  # Сдвигаем текущий узел вперед
        self.head = prev  # Обновляем голову списка на последний обработанный узел

    def print_list(self):
        """Выводит значения узлов списка."""
        current = self.head
        while current:
            print(current.value, end=' ')
            current = current.next


# Пример использования
if __name__ == "__main__":
    linked_list = LinkedList()
    for i in range(1, 6):  # Добавляем значения 1, 2, 3, 4, 5
        linked_list.append(i)

    linked_list.print_list()  # Печатаем исходный список
    print()

    linked_list.reverse()  # Реверсируем список

    linked_list.print_list()  # Печатаем реверсированный список
